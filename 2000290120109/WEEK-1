#include <bits/stdc++.h>
using namespace std;
class Node {
public:
    int data;
    Node* next;

    Node(int data) {
        this->data = data;
        this->next = NULL;
    }
};

class LinkedList {
private:
    Node* head =NULL;
public:
    

    void insertAtFirst(int data) {
        Node* newNode = new Node(data);
        newNode->next = head;
        head = newNode;
    }

    void insertAtLast(int data) {
        Node* newNode = new Node(data);
        if (head == NULL) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != NULL) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    void insertAtPosition(int data, int position) {
        if (position <= 0) {
            std::cout << "Invalid position." << std::endl;
            return;
        }
        if (position == 1 || head == NULL) {
            insertAtFirst(data);
        } else {
            Node* newNode = new Node(data);
            Node* current = head;
            int count = 1;
            while (count < position - 1 && current != NULL) {
                current = current->next;
                count++;
            }
            if (current == NULL) {
                std::cout << "Invalid position." << std::endl;
                return;
            }
            newNode->next = current->next;
            current->next = newNode;
        }
    }

    void deleteAtPosition(int position) {
        if (position <= 0 || head == NULL) {
            std::cout << "Invalid position." << std::endl;
            return;
        }
        if (position == 1) {
            Node* temp = head;
            head = head->next;
            delete temp;
        } else {
            Node* current = head;
            Node* prev = NULL;
            int count = 1;
            while (count < position && current != NULL) {
                prev = current;
                current = current->next;
                count++;
            }
            if (current == NULL) {
                std::cout << "Invalid position." << std::endl;
                return;
            }
            prev->next = current->next;
            delete current;
        }
    }

    bool search(int value) {
        Node* current = head;
        while (current != NULL) {
            if (current->data == value) {
                return true;
            }
            current = current->next;
        }
        return false;
    }

    void print() {
        Node* current = head;
        while (current != NULL) {
            std::cout << current->data << " ";
            current = current->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList list1;

     list1.insertAtFirst(1);
     list1.insertAtFirst(2);
    
     list1.insertAtLast(3);
     list1.insertAtLast(4);
     list1.print();

     list1.insertAtPosition(5, 2);
     list1.insertAtPosition(6, 3);
     cout << list1.search(5) << endl; 

     list1.print(); 

     list1.deleteAtPosition(1);

     list1.print();  


    return 0;
}
