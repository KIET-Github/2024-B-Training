//Creation of Liked list
public class LinkedList {
  
    Node head; // head of list
  
    // Linked list Node.
    // Node is a static nested class
    // so main() can access it
    static class Node {
  
        int data;
        Node next;
  
        // Constructor
        Node(int d)
        {
            data = d;
            next = null;
        }
    }
  
    // Method to insert a new node
    public static LinkedList insert(LinkedList list,
                                    int data)
    {
        // Create a new node with given data
        Node new_node = new Node(data);
        new_node.next = null;
  
        // If the Linked List is empty,
        // then make the new node as head
        if (list.head == null) {
            list.head = new_node;
        }
        else {
            // Else traverse till the last node
            // and insert the new_node there
            Node last = list.head;
            while (last.next != null) {
                last = last.next;
            }
  
            // Insert the new_node at last node
            last.next = new_node;
        }

        return list;
    }

    public static void printList(LinkedList list)
    {
        Node currNode = list.head;
  
        System.out.print("LinkedList: ");
  
        while (currNode != null) {

            System.out.print(currNode.data + " ");
            currNode = currNode.next;
        }
    }

// Deletion of linked List

class Solution {
    public void deleteNode(ListNode node) {
         while(node.next.next != null){
            node.val = node.next.val;
            node = node.next;
        }
        
        node.val = node.next.val; 
        node.next = null;
    }
}
//Middle of a linked list
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;

        while(fast !=null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}

//Reverse a LinkedList
class Solution {
    public ListNode reverseBetween(ListNode head, int left, 
    int right) {
        if(left == right)
        return head;

        ListNode prev = null;
        ListNode curr = head;

        for(int i=0;i<left-1;i++){
            prev = curr;
            curr = curr.next;
        }

        ListNode next = curr.next;

        ListNode first = prev;
        ListNode newEnd = curr;

        for(int i=0;curr!=null&& i<(right-left+1);i++){
            curr.next = prev;
            prev= curr;
            curr = next;
            if(next != null){
             next = next.next;   
            }

            if(first!=null){
                first.next = prev;
            }
            else{
                head = prev;
            }
            newEnd.next =curr;
           
        }
         return head;
    }
}

 //Linked list cycle
public class Solution {
    public ListNode detectCycle(ListNode head) {
       ListNode slow = head, fast = head;
        while(fast != null && fast.next != null){

            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast)
            break;
        }
        
        if(fast == null || fast.next == null)
        return null;
        while(head != slow){
            head = head.next;
            slow = slow.next;
        }
        return slow;
    }
}
//Palindrome Linked List
class Solution {
    public boolean isPalindrome(ListNode head) {
       if( head.next==null){
            return true;
        }
        //Step 1- find Middle node
        ListNode midNode= middle ( head);  //calling function middleNode

        //Step2 - Reverse second half of the linkedlist

        ListNode prev = null;
        ListNode curr= midNode;
        ListNode next;

        while(curr != null){
            next = curr.next;
            curr.next= prev;
            prev= curr;
            curr= next;
        }
        
        ListNode left = head;    
        ListNode right = prev;   //rightmost element is prev as curr becomes equal to null

        //Step 3- check left and right values for palindrome

        while(right!= null){
            if (right.val != left.val){  
                return false;   
            }
            left= left.next;
            right= right.next;
        }
        return true;
    }

    public ListNode middle(ListNode head){
        if(head == null)
        return head;

        ListNode slow = head;
        ListNode fast = head;

        while(fast!= null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

}
